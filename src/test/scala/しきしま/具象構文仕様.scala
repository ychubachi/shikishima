package しきしま

import org.scalatest.FunSuite

import しきしま._

class 具象表現仕様 extends FunSuite {
  test("論理定数") {
    assert(具象構文.出力(論理定数(true)) == "真")
    assert(具象構文.出力(論理定数(false)) == "偽")
  }

  test("整数定数") {
    assert(具象構文.出力(整数定数(0)) == "0")
    assert(具象構文.出力(整数定数(99)) == "99")
  }

  test("変数") {
    assert(具象構文.出力(変数("名前")) == "名前")
  }

  /*
  test("算術演算子") {
    assert(具象構文.出力(加算()) == "足す")
    assert(具象構文.出力(減算()) == "引く")
    assert(具象構文.出力(乗算()) == "掛ける")
    assert(具象構文.出力(除算()) == "割る")
    assert(具象構文.出力(剰余()) == "余り")
  }
  */

  test("二項演算") {
    assert(具象構文.出力(二項演算(整数定数(1), 整数定数(2), 加算())) ==
      "1に2を足す")
    assert(具象構文.出力(二項演算(整数定数(5), 整数定数(3), 減算())) ==
      "5から3を引く")
    assert(具象構文.出力(二項演算(整数定数(2), 整数定数(3), 乗算())) ==
      "2に3を掛ける")
    assert(具象構文.出力(二項演算(整数定数(8), 整数定数(4), 除算())) ==
      "8を4で割る")
    assert(具象構文.出力(二項演算(整数定数(10), 整数定数(3), 剰余())) ==
      "10を3で割った余りを求める")
  }
}
